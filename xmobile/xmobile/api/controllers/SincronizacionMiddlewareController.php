<?php

namespace api\controllers;

use api\traits\Respuestas;
use Yii;

class SincronizacionmiddlewareController extends \yii\rest\ActiveController
{
    use Respuestas;

    public $modelClass = 'backend\models\User';

    public function init()
    {
        parent::init();
        Yii::$app->user->enableSession = false;
    }

    /*public function behaviors() {
    $behaviors = parent::behaviors();
    $behaviors['authenticator'] = [
    'tokenParam' => 'access-token',
    'class' => QueryParamAuth::className(),
    ];
    return $behaviors;
    }*/

    protected function verbs()
    {
        return [
            'index' => ['GET', 'HEAD'],
            'view' => ['GET', 'HEAD'],
            'create' => ['POST'],
            'update' => ['PUT', 'PATCH'],
            'delete' => ['DELETE'],
        ];
    }

    public function actions()
    {
        $actions = parent::actions();
        unset($actions['index']);
        unset($actions['view']);
        unset($actions['create']);
        unset($actions['update']);
        unset($actions['delete']);
        return $actions;
    }

    public function actionIndex() {
        // Database configuration
/*         $host = "localhost";
        $username = "root";
        $password = "123456";
        $database_name = "bol_middleware1"; */

        $data = Yii::$app->request->post('pos');
        $dir = \Yii::getAlias('@backend') . '/config/database.inc';
        $file = fopen($dir, "r") or exit("Unable to open file!");
        $resp = "";
        while (!feof($file))
            $resp = fgets($file);
        fclose($file);
        $x = explode("#", $resp);
        $host = "localhost";
        $database_name = $x[0];
        $username = $x[1];
        $password = $x[2];

        // Get connection object and set the charset
        $conn = mysqli_connect($host, $username, $password, $database_name);
        $conn->set_charset("utf8");

        // Get All Table Names From the Database
        $tables = array();
        $sql = "SHOW TABLES";
        $result = mysqli_query($conn, $sql);

        while ($row = mysqli_fetch_row($result)) {
            $tables[] = $row[0];
        }

        // print_r($tables);
        $sqlScript = "";
        foreach ($tables as $table) {

            // Prepare SQLscript for creating table structure
            /*             $query = "SHOW CREATE TABLE $table";
            $result = mysqli_query($conn, $query);
            $row = mysqli_fetch_row($result);

            $sqlScript .= "\n\n" . $row[1] . ";\n\n"; */

            if($table!="log_envio"){

                $query = "SELECT * FROM $table";
                $result = mysqli_query($conn, $query);
    
                $columnCount = mysqli_num_fields($result);
    
                // Prepare SQLscript for dumping data for each table
                for ($i = 0; $i < $columnCount; $i++) {
                    while ($row = mysqli_fetch_row($result)) {
                        $sqlScript .= "INSERT INTO $table VALUES(";
                        for ($j = 0; $j < $columnCount; $j++) {
                            $row[$j] = $row[$j];
    
                            if (isset($row[$j])) {
                                $sqlScript .= '"' . $row[$j] . '"';
                            } else {
                                $sqlScript .= '""';
                            }
                            if ($j < ($columnCount - 1)) {
                                $sqlScript .= ',';
                            }
                        }
                        $sqlScript .= ");\n";
                    }
                }
            }
            

            $sqlScript .= "\n";
        }
       // $sqlScript = base64_encode($sqlScript);
        $sqlScript = gzcompress($sqlScript);
        $sqlScript = base64_encode($sqlScript);
        //echo ($sqlScript);
        return $sqlScript;
    }

    public function actionCreate()
    {
        // configuracion de servidor
        $inicial = Yii::$app->request->post('inicial');
        $final = Yii::$app->request->post('final');
        $dir = \Yii::getAlias('@backend') . '/config/database.inc';
        $file = fopen($dir, "r") or exit("Unable to open file!");
        $resp = "";
        while (!feof($file))
            $resp = fgets($file);
        fclose($file);
        $x = explode("#", $resp);
        $host = "localhost";
        $database_name = $x[0];
        $username = $x[1];
        $password = $x[2];

        // Get connection object and set the charset
        $conn = mysqli_connect($host, $username, $password, $database_name);
        $conn->set_charset("utf8");

        // Get All Table Names From the Database
        $tables = array();
        $sql = "SHOW TABLES";
        $result = mysqli_query($conn, $sql);

        while ($row = mysqli_fetch_row($result)) {
            $tables[] = $row[0];
        }

        // print_r($tables);
        $sqlScript = "";
        foreach ($tables as $table) {

            // Prepare SQLscript for creating table structure
            /*             $query = "SHOW CREATE TABLE $table";
            $result = mysqli_query($conn, $query);
            $row = mysqli_fetch_row($result);

            $sqlScript .= "\n\n" . $row[1] . ";\n\n"; */

            $query = "SELECT * FROM $table";
            $result = mysqli_query($conn, $query);

            $columnCount = mysqli_num_fields($result);

            // Prepare SQLscript for dumping data for each table
            for ($i = 0; $i < $columnCount; $i++) {
                while ($row = mysqli_fetch_row($result)) {
                    $sqlScript .= "INSERT INTO $table VALUES(";
                    for ($j = 0; $j < $columnCount; $j++) {
                        $row[$j] = $row[$j];

                        if (isset($row[$j])) {
                            $sqlScript .= '"' . $row[$j] . '"';
                        } else {
                            $sqlScript .= '""';
                        }
                        if ($j < ($columnCount - 1)) {
                            $sqlScript .= ',';
                        }
                    }
                    $sqlScript .= ");\n";
                }
            }

            $sqlScript .= "\n";
        }
        $sqlScript = base64_encode($sqlScript);
        //return strlen($sqlScript);
        return [
            'length' => strlen($sqlScript),
            'inicial' => $inicial,
            'final' => $final,
            'data' => substr($sqlScript, $posicion, $final)
        ];
        
    }

    public function actionEstructura()
    {
        // Configuarcion de la Base de Datos
        $host = "localhost";
        $username = "root";
        $password = "";
        $database_name = "middlewarebolivia";

        // Objeto conexion
        $conn = mysqli_connect($host, $username, $password, $database_name);
        $conn->set_charset("utf8");

        // Nombres de las tablas de la BD
        $tables = array();
        $sql = "SHOW TABLES";
        $result = mysqli_query($conn, $sql);

        while ($row = mysqli_fetch_row($result)) {
            $tables[] = $row[0];
        }

        // print_r($tables);
        $sqlScript = "";
        foreach ($tables as $table) {

            // Preparar SQLscript para preparar la estructura
            $query = "SHOW CREATE TABLE $table";
            $result = mysqli_query($conn, $query);
            $row = mysqli_fetch_row($result);

            $sqlScript .= "\n\n" . $row[1] . ";\n\n";
        }
        // apending views and sp
        $dataLines = "";
        // apending views and sp
        $dataLines = "";
        $pasDataLines = "";
        $sqlScript = base64_encode($sqlScript);
        return ['dataTables' => $sqlScript, 'dataViews' => $dataLines, 'dataProcedures' => $pasDataLines];
        // $dataLines = file_get_contents('./adds.sql');
        //return $dataLines;
        //return $sqlScript;

        // $dataLines = file_get_contents('./adds.sql');
        /* $file = new SPLFileObject('/path/to/file.txt');
        foreach($file as $line) {
            echo $line;
        }
        /* $myfile = fopen("./adds.txt", "r") or die("Unable to open file!");
        $contents = fread($myfile, filesize('/usr/local/something.txt')); */
/*         while (!feof($myfile)) {
            $line = fgets($myfile);
            if (!empty($line)) {
                $dataLines .= $line;
            }
        } */
        /*fclose($myfile);
        return $contents; */
        //return $sqlScript;
        //return base64_encode($sqlScript);
    }

}
